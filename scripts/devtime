#!/usr/bin/env python

import sys
from datetime import datetime, timedelta, time

LOCK_LOG_FILE = '/home/jose/.lock.log'
YEAR_LOG_FILE = '/home/jose/logs/lock/19/lock.2019.log'

dateformat = "%Y-%m-%d"
datetimeformat = "%Y-%m-%d_%H-%M-%S"

SATURDAY, SUNDAY = 5, 6


def day_str(day):
    return day.strftime(dateformat)


def today_str():
    return day_str(datetime.today())


def read_log(path=LOCK_LOG_FILE):
    data = {}
    with open(path) as f:
        for line in f:
            l, date_str = line.split()
            dt = datetime.strptime(date_str, datetimeformat)
            date = dt.strftime(dateformat)
            if date not in data:
                data[date] = []
            data[date] += [(l, dt)]
    return data


def is_lunch_break(time_lock, time_unlock):
    """
    It is lunch break around 2:30, and if the time out is bigger than 5 minutes
    """
    two_30_pm = time_lock.replace(hour=14, minute=30, second=0)
    return time_lock < two_30_pm and time_unlock > two_30_pm and \
        time_unlock - time_lock > timedelta(0, 5*60)


def is_futbolin_break(time_lock, time_unlock):
    """
    It is futbolin break after 6, if the away time is bigger than 5 minutes
    """
    six_pm = time_lock.replace(hour=18, minute=00, second=0)
    return time_lock > six_pm and time_unlock - time_lock > timedelta(0, 5*60)


def calculate_devtime(day, is_today=True):
    now = datetime.now()

    start_of_the_day = None
    last_lock = None

    total_time_wasted = timedelta()
    time_lock = None
    for lock, time in day:
        if lock == 'U':
            time_unlock = time
            if start_of_the_day is None:
                last_lock = start_of_the_day = time_unlock
            # Calculate wasted time
            two_pm, three_pm, six_pm = (
                time.replace(hour=hour, minute=0, second=0)
                for hour in (14, 15, 18)
            )
            if time_lock and (
                is_lunch_break(time_lock, time_unlock) or
                is_futbolin_break(time_lock, time_unlock)):
                total_time_wasted += time_unlock - time_lock
                # Prevent the wasted time being counted twice after two unlocks
                # This can happen if we logout or restart the computer
                time_lock = None

        else:
            last_lock = time_lock = time

    # Day ongoing -> until now
    end_of_the_day = last_lock if not is_today else now
    return (end_of_the_day - start_of_the_day) - total_time_wasted, \
        total_time_wasted


def format_delta(delta, short=False):
    # s = '{} hours {} minutes {} seconds'
    if delta.days:
        s = '{}:{}:{:02}' if short else '{} days {} hours {} minutes'
        # Days*3 gives working days, since 24 = 8 * 3
        return s.format(delta.days * 3, delta.seconds // 3600,
                        (delta.seconds // 60) % 60, delta.seconds % 60)
    else:
        s = '{}:{:02}' if short else '{} hours {} minutes'
        return s.format(delta.seconds // 3600,
                        (delta.seconds // 60) % 60, delta.seconds % 60)


def output(delta, wasted, short=False):
    if short:
        return format_delta(delta, short=True)
    else:
        return '{} ({} wasted)'.format(
            format_delta(delta),
            format_delta(wasted)
        )


def format_timedelta(td):
    if td < timedelta(0):
        return '-' + format_timedelta(-td)
    else:
        # Change this to format positive timedeltas the way you want
        #return str(td)
        return format_delta(td)


def read_options():
    options = {}
    for i, arg in enumerate(sys.argv):
        if arg.startswith('--'):
            option = arg[2:]
            value = True
            if i + 1 < len(sys.argv) and \
                    not sys.argv[i + 1].startswith('--'):
                value = sys.argv[i + 1]
            options[option] = value

    return options

def daterange(start_date, end_date):
    for n in range(int((end_date - start_date).days)):
        yield start_date + timedelta(n)

def main():
    log = read_log()
    now = datetime.now()
    today = datetime.today()
    stoday = day_str(today)
    options = read_options()
    weekday = today.weekday()
    hours_per_day = 7.5 if options.get('summer') else 8
    friday_hours_per_day = 6 # Only in summer
    if options.get('week'):
        days_in_week = [day_str(today - timedelta(days=i)) for i in range(weekday + 1)]
        total_delta, total_wasted = None, None
        cnt = 0
        for i, sday in enumerate(days_in_week):
            if sday in log:
                delta, wasted = calculate_devtime(log[sday], is_today=(i == 0))
                if total_delta is None:
                    total_delta = delta
                    total_wasted = wasted
                else:
                    total_delta += delta
                    total_wasted += wasted
                cnt += 1
            else:
                print('{} FREE!'.format(sday))
        # Print X hours Y minutes (X hours Y minutes wasted)
        print(output(total_delta, total_wasted, options.get('short')))
        hours_in_the_week = hours_per_day*cnt \
            if not options.get('summer') or cnt < 5 \
            else hours_per_day*(cnt - 1) + friday_hours_per_day
        difference = total_delta - timedelta(hours=hours_in_the_week)
        # Print how much time until going home
        print(format_timedelta(difference))
        # Print at what time you will go home

        d = -difference + timedelta(minutes=30) \
            if now.time() < time(14) \
            else -difference
        print('You go out at: ', (now + d).time())
    elif options.get('year'):
        log = read_log(YEAR_LOG_FILE)
        jan_1 = datetime(today.year, 1, 1)
        days_in_year = [
            day_str(day)
            for day in daterange(jan_1, today)
            if (day.weekday() not in (SATURDAY, SUNDAY))
        ]
        days_in_year.reverse()
        total_delta, total_wasted = None, None
        cnt = 0
        for i, sday in enumerate(days_in_year):
            if sday in log:
                delta, wasted = calculate_devtime(log[sday], is_today=(i == 0))
                if total_delta is None:
                    total_delta = delta
                    total_wasted = wasted
                else:
                    total_delta += delta
                    total_wasted += wasted
                cnt += 1
            else:
                print('{} FREE!'.format(sday))
        total_delta, total_wasted = total_delta or timedelta(), total_wasted or timedelta()
        # Print how many days you have worked
        print('You have worked {} days'.format(cnt))
        # Print X hours Y minutes (X hours Y minutes wasted)
        print(output(total_delta, total_wasted, options.get('short')))
        hours_in_the_week = hours_per_day*cnt
        difference = total_delta - timedelta(hours=hours_in_the_week)
        # Print how much time until going home
        print(format_timedelta(difference))

        d = -difference + timedelta(minutes=30) \
            if now.time() < time(14) \
            else -difference
    else:
        if stoday not in log:
            print('?')
        else:
            delta, wasted = calculate_devtime(log[stoday], is_today=True)
            print(output(delta, wasted, options.get('short')))

if __name__ == '__main__':
    main()
