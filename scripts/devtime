#!/usr/bin/env python

import sys
from datetime import datetime, timedelta

LOCK_LOG_FILE='/home/jose/lock.log'

dateformat = "%Y-%m-%d"
datetimeformat = "%Y-%m-%d_%H-%M-%S"


def today_str():
    return datetime.today().strftime(dateformat)


def read_log():
    data = {}
    with open(LOCK_LOG_FILE) as f:
        for line in f:
            l, date_str = line.split()
            dt = datetime.strptime(date_str, datetimeformat)
            date = dt.strftime(dateformat)
            if date not in data:
                data[date] = []
            data[date] += [(l, dt)]
    return data


def calculate_devtime(today, is_today=True):
    now = datetime.now()

    start_of_the_day = None
    last_unlock = None


    total_time_wasted = timedelta()
    time_lock = None
    for lock, time in today:
        if lock == 'U':
            time_unlock = time
            if start_of_the_day is None:
                start_of_the_day = time_unlock
            # Calculate wasted time
            two_pm, three_pm, six_pm = (time.replace(hour=hour, minute=0, second=0)
                                          for hour in (14, 15, 18))
            if time_lock and (\
                (time_lock < three_pm and time_unlock > two_pm) or # Lunch
                time_lock > six_pm): # Futbolin
                total_time_wasted += time_unlock - time_lock
                # Prevent the wasted time being counted twice after two unlocks
                # This can happen if we logout or restart the computer
                time_lock = None
        else:
            time_lock = time

    # Day ongoing -> until now
    end_of_the_day = last_unlock if not is_today else now
    return (end_of_the_day - start_of_the_day) - total_time_wasted, total_time_wasted


def format_delta(delta, short=False):
    # s = '{} hours {} minutes {} seconds'
    s = '{}:{}' if short else '{} hours {} minutes'
    return s.format(delta.days*24 + delta.seconds//3600, (delta.seconds//60)%60, delta.seconds%60)

def output(delta, wasted):
    short = len(sys.argv) > 1 and sys.argv[1] == '--short'
    if short:
        return format_delta(delta, short=True)
    else:
        return '{} ({} wasted)'.format(format_delta(delta), format_delta(wasted))

def main():
    log = read_log()
    today = today_str()
    if today not in log:
        print('?')
    else:
        delta, wasted = calculate_devtime(log[today], is_today=True)
        print(output(delta, wasted))

if __name__ == '__main__':
    main()
